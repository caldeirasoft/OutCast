import com.caldeirasoft.outcast.domain.models.Artwork;
import com.caldeirasoft.outcast.domain.models.Genre;
import java.lang.Boolean;
import java.lang.Integer;
import kotlin.collections.List;
import kotlinx.datetime.Instant;

CREATE TABLE episode (
    episodeId INTEGER NOT NULL UNIQUE PRIMARY KEY ASC,
    name TEXT NOT NULL,
    url TEXT NOT NULL,
    podcastId INTEGER NOT NULL,
    podcastName TEXT NOT NULL,
    artistName TEXT NOT NULL,
    artistId INTEGER,
    releaseDateTime TEXT as Instant NOT NULL,
    genreId INTEGER AS Int NOT NULL,
    feedUrl TEXT NOT NULL,
    description TEXT,
    contentAdvisoryRating TEXT,
    artwork TEXT AS Artwork,
    mediaUrl TEXT NOT NULL,
    mediaType TEXT NOT NULL,
    duration INTEGER AS Int NOT NULL,
    podcastEpisodeSeason INTEGER AS Int,
    podcastEpisodeNumber INTEGER AS Int,
    podcastEpisodeWebsiteUrl TEXT,
    podcastEpisodeType TEXT,
    playbackPosition INTEGER AS Int,
    isPlayed INTEGER as Boolean NOT NULL DEFAULT 0,
    isFavorite INTEGER as Boolean NOT NULL DEFAULT 0,
    playedAt TEXT AS Instant,
    updatedAt TEXT AS Instant NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    FOREIGN KEY (`podcastId`) REFERENCES `podcast` (`podcastId`)
);

getById:
SELECT e.*
FROM episode e
WHERE episodeId = ?;

getAllByPodcastId:
SELECT *
FROM episode
WHERE podcastId = ?
;

getAllPagedByPodcastId:
SELECT *
FROM episode
WHERE podcastId = ?
LIMIT :limit OFFSET :offset;

countAllByPodcastId:
SELECT COUNT(*)
FROM episode
WHERE podcastId = ?
;

getFavorites:
SELECT e.*
FROM episode AS e
WHERE isFavorite = 1;

getHistory:
SELECT e.*
FROM episode AS e
WHERE playbackPosition != NULL OR isPlayed = 1;

insert:
INSERT INTO episode
(episodeId, name, url, podcastId, podcastName, artistName, artistId,
 releaseDateTime, genreId, feedUrl, description, contentAdvisoryRating, artwork,
  mediaUrl, mediaType, duration, podcastEpisodeSeason, podcastEpisodeNumber, podcastEpisodeWebsiteUrl, podcastEpisodeType)
VALUES
?
ON CONFLICT(episodeId)
DO UPDATE SET
    name = excluded.name,
    url = excluded.url,
    podcastId = excluded.podcastId,
    podcastName = excluded.podcastName,
    artistName = excluded.artistName,
    artistId = excluded.artistId,
    releaseDateTime = excluded.releaseDateTime,
    genreId = excluded.genreId,
    feedUrl = excluded.feedUrl,
    description = excluded.description,
    contentAdvisoryRating = excluded.contentAdvisoryRating,
    artwork = excluded.artwork,
    mediaUrl = excluded.mediaUrl,
    mediaType = excluded.mediaType,
    duration = excluded.duration,
    podcastEpisodeSeason = excluded.podcastEpisodeSeason,
    podcastEpisodeNumber = excluded.podcastEpisodeNumber,
    podcastEpisodeWebsiteUrl = excluded.podcastEpisodeWebsiteUrl,
    updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE episodeId = excluded.episodeId;


addToFavorites:
UPDATE episode
SET isFavorite = 1, updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE episodeId = ?
;

removeFromFavorites:
UPDATE episode
SET isFavorite = 0, updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE episodeId = ?
;

addToHistory:
UPDATE episode
SET playbackPosition = ?, playedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE episodeId = ?
;

markEpisodeAsPlayed:
UPDATE episode
SET playbackPosition = NULL, isPlayed = 1, playedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE episodeId = ?
;

deleteById:
DELETE FROM episode
WHERE episodeId = ?;

deleteAll:
DELETE FROM episode;
