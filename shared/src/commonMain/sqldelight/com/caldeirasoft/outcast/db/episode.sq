import com.caldeirasoft.outcast.domain.models.Artwork;
import com.caldeirasoft.outcast.domain.models.Genre;
import java.lang.Integer;
import kotlin.collections.List;
import kotlinx.datetime.Instant;

PRAGMA foreign_keys = 1;
CREATE TABLE episode (
    episodeId INTEGER NOT NULL UNIQUE PRIMARY KEY ASC,
    name TEXT NOT NULL,
    podcastId INTEGER NOT NULL,
    podcastName TEXT NOT NULL,
    artistName TEXT NOT NULL,
    artistId INTEGER,
    releaseDateTime TEXT as Instant NOT NULL,
    genre TEXT AS List<Integer> NOT NULL,
    feedUrl TEXT NOT NULL,
    description TEXT,
    contentAdvisoryRating TEXT,
    artwork TEXT AS Artwork,
    mediaUrl TEXT NOT NULL,
    mediaType TEXT NOT NULL,
    duration INTEGER NOT NULL,
    podcastEpisodeSeason INTEGER,
    podcastEpisodeNumber INTEGER,
    podcastEpisodeWebsiteUrl TEXT,
    isFavorite INTEGER AS Boolean NOT NULL DEFAULT 0,
    isPlayed INTEGER AS Boolean NOT NULL DEFAULT 0,
    playbackPosition INTEGER,
    playedAt TEXT AS Instant,
    updatedAt TEXT AS Instant NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    FOREIGN KEY (`podcastId`) REFERENCES `podcast` (`podcastId`)
);

CREATE VIEW episodeSummary AS
    SELECT e.episodeId,
        name,
        podcastId,
        podcastName
        releaseDateTime,
        description,
        contentAdvisoryRating,
        artwork,
        duration,
        podcastEpisodeSeason,
        podcastEpisodeNumber,
        isFavorite,
        isPlayed,
        playbackPosition,
        CASE WHEN q.episodeId IS NOT NULL THEN 1 ELSE 0 END AS isInQueue,
        CASE WHEN i.episodeId IS NOT NULL THEN 1 ELSE 0 END AS isInInbox,
        CASE WHEN playbackPosition IS NOT NULL OR isPlayed = 1 THEN 1 ELSE 0 END AS isInHistory,
        updatedAt
    FROM episode e
    LEFT JOIN inbox i ON (e.episodeId = i.episodeId)
    LEFT JOIN queue q ON (e.episodeId = q.episodeId)
    ;

CREATE VIEW episodeWithInfos AS
    SELECT e.episodeId, e.name, e.podcastId, e.podcastName, e.artistName, e.artistId,
        e.releaseDateTime, e.genre, e.feedUrl, e.description, e.contentAdvisoryRating, e.artwork,
        e.mediaUrl, e.mediaType, e.duration,
        e.podcastEpisodeSeason, e.podcastEpisodeNumber, e.podcastEpisodeWebsiteUrl,
        e.isFavorite, e.isPlayed, e.playbackPosition,
        CASE WHEN q.episodeId IS NOT NULL THEN 1 ELSE 0 END AS isInQueue,
        CASE WHEN i.episodeId IS NOT NULL THEN 1 ELSE 0 END AS isInInbox,
        CASE WHEN e.playbackPosition IS NOT NULL OR e.isPlayed = 1 THEN 1 ELSE 0 END AS isInHistory
    FROM episode e
    LEFT JOIN inbox i ON (e.episodeId = i.episodeId)
    LEFT JOIN queue q ON (e.episodeId = q.episodeId)
    ;

CREATE VIEW favoriteEpisodesCount AS
    SELECT podcastId,
        podcastName,
        artwork,
        COUNT(e.episodeId) AS episodeCount
    FROM episode e
    WHERE isFavorite = 1
    GROUP BY podcastId, podcastName, artwork
;

CREATE VIEW playedEpisodesCount AS
    SELECT podcastId,
        podcastName,
        artwork,
        COUNT(episode.episodeId) AS episodeCount
    FROM episode
    WHERE playbackPosition IS NOT NULL OR isPlayed = 1
    GROUP BY podcastId, podcastName, artwork
;

CREATE VIEW sectionWithCount AS
    SELECT podcastId,
        SUM(isInQueue) AS queueCount,
        SUM(isInInbox) AS inboxCount,
        SUM(CASE WHEN isFavorite THEN 1 ELSE 0 END) AS favoritesCount,
        SUM(isInHistory) AS historyCount
    FROM episodeSummary
    GROUP BY podcastId
;

selectEpisodeById:
SELECT e.*
FROM episodeWithInfos e
WHERE episodeId = ?;

selectAllByPodcastId:
SELECT *
FROM episodeSummary
WHERE podcastId = ?;

selectAllFavorites:
SELECT e.*
FROM episodeSummary AS e
WHERE isFavorite = 1;

selectFavoritesByPodcastId:
SELECT e.*
FROM episodeSummary AS e
WHERE isFavorite = 1 AND podcastId = ?;

selectFavoritesEpisodesCount:
SELECT * FROM favoriteEpisodesCount;

selectAllHistory:
SELECT e.*
FROM episodeSummary AS e
WHERE isInHistory = 1;

selectHistoryByPodcastId:
SELECT e.*
FROM episodeSummary AS e
WHERE isInHistory = 1 AND podcastId = ?;

selectPlayedEpisodesCount:
SELECT *
FROM playedEpisodesCount;

selectSectionWithCount:
SELECT *
FROM sectionWithCount
WHERE podcastId = ?;

selectEpisodesFromInboxByPodcastId:
SELECT e.*
FROM episodeSummary e
INNER JOIN inbox USING (episodeId)
WHERE podcastId = :podcastId;

selectEpisodesFromQueueByPodcastId:
SELECT e.*
FROM episodeSummary e
INNER JOIN queue USING (episodeId)
WHERE podcastId = :podcastId;

insertEpisode:
INSERT INTO episode
(episodeId, name, podcastId, podcastName, artistName, artistId,
 releaseDateTime, genre, feedUrl, description, contentAdvisoryRating, artwork,
  mediaUrl, mediaType, duration, podcastEpisodeSeason, podcastEpisodeNumber, podcastEpisodeWebsiteUrl)
VALUES
(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

addToFavorites:
UPDATE episode
 SET isFavorite = 1,
 updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE episodeId = ?;

removeFromFavorites:
UPDATE episode
 SET isFavorite = 0,
 updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE episodeId = ?;

addToHistory:
UPDATE episode
 SET playbackPosition = ?,
 playedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now'),
 updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE episodeId = ?;

markEpisodeAsPlayed:
UPDATE episode
 SET isPlayed = 1,
 playbackPosition = NULL,
 playedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now'),
 updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE episodeId = ?;

markEpisodeAsUnplayed:
UPDATE episode
 SET isPlayed = 0,
 playbackPosition = NULL,
 playedAt = NULL,
 updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE episodeId = ?;

deleteEpisodeById:
DELETE FROM episode
WHERE episodeId = ?;

deleteAll:
DELETE FROM episode;