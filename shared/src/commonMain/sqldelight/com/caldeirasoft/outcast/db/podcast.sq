import kotlinx.datetime.Instant;
import com.caldeirasoft.outcast.domain.models.Artwork;
import com.caldeirasoft.outcast.domain.models.Genre;
import com.caldeirasoft.outcast.domain.models.NewEpisodesAction;
import java.lang.Integer;
import kotlin.collections.List;

CREATE TABLE podcast (
    podcastId INTEGER NOT NULL UNIQUE PRIMARY KEY ASC,
    name TEXT NOT NULL,
    url TEXT NOT NULL,
    artistName TEXT NOT NULL,
    artistId INTEGER,
    artistUrl TEXT,
    description TEXT,
    feedUrl TEXT NOT NULL,
    releaseDateTime TEXT as Instant NOT NULL,
    artwork TEXT AS Artwork,
    trackCount INTEGER NOT NULL,
    podcastWebsiteURL TEXT,
    copyright TEXT,
    contentAdvisoryRating TEXT,
    userRating REAL,
    genreId INTEGER AS Int,
    genre TEXT AS Genre,
    isSubscribed INTEGER AS Boolean NOT NULL DEFAULT 0,
    newEpisodeAction TEXT AS NewEpisodesAction NOT NULL,
    updatedAt TEXT AS Instant NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))
);

CREATE INDEX podcast_id ON podcast(podcastId);
CREATE INDEX podcast_url ON podcast(url);

PRAGMA foreign_keys = 1;

insert:
INSERT INTO podcast (podcastId, name, url, artistName, artistId, artistUrl, description, feedUrl, releaseDateTime, artwork, trackCount, podcastWebsiteURL, copyright, contentAdvisoryRating, userRating, genreId, genre, isSubscribed, newEpisodeAction, updatedAt)
VALUES ?
ON CONFLICT (podcastId)
DO UPDATE SET
  podcastId = excluded.podcastId,
  name = excluded.name,
  url = excluded.url,
  artistName = excluded.artistName,
  artistId = excluded.artistName,
  artistUrl = excluded.artistUrl,
  description = excluded.description,
  feedUrl = excluded.feedUrl,
  releaseDateTime = excluded.releaseDateTime,
  artwork = excluded.artwork,
  trackCount = excluded.trackCount,
  podcastWebsiteURL = excluded.podcastWebsiteURL,
  copyright = excluded.copyright,
  contentAdvisoryRating = excluded.contentAdvisoryRating,
  userRating = excluded.userRating,
  genreId = excluded.genreId,
  genre = excluded.genre,
  updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
;

getAll:
SELECT p.*
FROM podcast p;

getSubscribed:
SELECT p.*
FROM podcast p
WHERE isSubscribed = 1
;

getById:
SELECT *
FROM podcast
WHERE podcastId = ?;

updateMetadata:
UPDATE podcast
SET releaseDateTime = ?,
 trackCount = ?,
 updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE podcastId = ?
;

updateLastAccess:
UPDATE podcast
SET updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE podcastId = ?
;

subscribe :
UPDATE podcast
SET isSubscribed = 1
WHERE podcastId = :podcastId
;

unsubscribe {
    UPDATE podcast
    SET isSubscribed = 0
    WHERE podcastId = :podcastId
    ;

    DELETE FROM inbox
    WHERE episodeId IN (
        SELECT episodeId
        FROM episode e
        WHERE e.podcastId = :podcastId
    );
}

deleteById:
DELETE FROM podcast
WHERE podcastId = ?;

deleteAll:
DELETE FROM podcast;