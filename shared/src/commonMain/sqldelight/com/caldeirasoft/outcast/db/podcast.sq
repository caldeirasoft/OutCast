import com.caldeirasoft.outcast.domain.models.Artwork;
import com.caldeirasoft.outcast.domain.models.Category;
import com.caldeirasoft.outcast.domain.models.NewEpisodesAction;
import java.lang.Integer;
import kotlin.collections.List;
import kotlinx.datetime.Instant;

CREATE TABLE podcast (
    feedUrl TEXT NOT NULL UNIQUE PRIMARY KEY,
    name TEXT NOT NULL,
    url TEXT NOT NULL,
    podcastId INTEGER,
    artistName TEXT NOT NULL,
    artistId INTEGER,
    artistUrl TEXT,
    description TEXT,
    releaseDateTime TEXT as Instant NOT NULL,
    artworkUrl TEXT NOT NULL,
    artworkDominantColor TEXT,
    trackCount INTEGER NOT NULL,
    podcastWebsiteURL TEXT,
    copyright TEXT,
    userRating REAL,
    category TEXT AS Category,
    newFeedUrl TEXT,
    isComplete INTEGER AS Boolean NOT NULL DEFAULT 0,
    isExplicit INTEGER AS Boolean NOT NULL DEFAULT 0,
    isSubscribed INTEGER AS Boolean NOT NULL DEFAULT 0,
    newEpisodeAction TEXT AS NewEpisodesAction NOT NULL,
    updatedAt TEXT AS Instant NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))
);

CREATE INDEX podcast_id ON podcast(podcastId);
CREATE INDEX podcast_url ON podcast(url);

PRAGMA foreign_keys = 1;

insert:
INSERT INTO podcast (feedUrl, name, url, artistName, podcastId, artistId, artistUrl, description
    , releaseDateTime, artworkUrl, artworkDominantColor, trackCount, podcastWebsiteURL, copyright
    , category, newFeedUrl, isComplete, isExplicit, userRating
    , isSubscribed, newEpisodeAction, updatedAt)
VALUES ?
ON CONFLICT (feedUrl)
DO UPDATE SET
  name = excluded.name,
  url = excluded.url,
  artistName = excluded.artistName,
  description = excluded.description,
  releaseDateTime = excluded.releaseDateTime,
  artworkUrl = excluded.artworkUrl,
  trackCount = excluded.trackCount,
  podcastWebsiteURL = excluded.podcastWebsiteURL,
  copyright = excluded.copyright,
  category = excluded.category,
  newFeedUrl = excluded.newFeedUrl,
  isComplete = excluded.isComplete,
  isExplicit = excluded.isExplicit,
  updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
;

getAll:
SELECT p.*
FROM podcast p;

getSubscribed:
SELECT p.*
FROM podcast p
WHERE isSubscribed = 1
;

getById:
SELECT *
FROM podcast
WHERE podcastId = ?;

getByUrl:
SELECT *
FROM podcast
WHERE feedUrl = ?;

updateId:
UPDATE podcast
SET podcastId = ?,
 artistId = ?
WHERE feedUrl = ?
;

updateMetadata:
UPDATE podcast
SET releaseDateTime = ?,
 trackCount = ?,
 updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE feedUrl = ?
;

updateLastAccess:
UPDATE podcast
SET updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE feedUrl = ?
;

subscribe :
UPDATE podcast
SET isSubscribed = 1
WHERE feedUrl = ?
;

unsubscribe {
    UPDATE podcast
    SET isSubscribed = 0
    WHERE feedUrl = :feedUrl
    ;

    DELETE FROM inbox
    WHERE EXISTS (
        SELECT feedUrl, guid
        FROM episode
        WHERE (episode.feedUrl = inbox.feedUrl AND episode.guid = inbox.guid)
    );
}

deleteByUrl:
DELETE FROM podcast
WHERE feedUrl = ?;

deleteAll:
DELETE FROM podcast;