import kotlinx.datetime.Instant;
import kotlin.collections.List;
import com.caldeirasoft.outcast.domain.models.Artwork;
import com.caldeirasoft.outcast.domain.models.Genre;

PRAGMA foreign_keys = 1;
CREATE TABLE inbox (
    episodeId INTEGER NOT NULL UNIQUE PRIMARY KEY,

    FOREIGN KEY (`episodeId`) REFERENCES `episode` (`episodeId`) ON DELETE CASCADE
);

CREATE TRIGGER add_episode_into_inbox
AFTER INSERT ON episode
BEGIN
    INSERT OR REPLACE INTO inbox (episodeId)
    SELECT episodeId
    FROM episode e
    INNER JOIN library p ON (e.podcastId = p.podcastId)
    WHERE e.episodeId = new.episodeId
      AND p.newEpisodeAction == 'INBOX';
END;


selectAll:
SELECT e.*
FROM episodeSummary e
INNER JOIN inbox USING (episodeId)
ORDER BY e.releaseDateTime DESC;

selectGenreId:
SELECT p.genreId
FROM episode e
INNER JOIN podcast p USING (podcastId)
INNER JOIN inbox USING (episodeId)
WHERE p.genreId IS NOT NULL;

selectEpisodesByGenreId:
SELECT e.*
FROM episodeSummary e
INNER JOIN podcast p USING (podcastId)
INNER JOIN inbox USING (episodeId)
WHERE p.genreId = :genreId
ORDER BY e.releaseDateTime DESC;

addToInbox:
INSERT INTO inbox (episodeId)
VALUES (?);

removeFromInbox:
DELETE FROM inbox
WHERE episodeId = :episodeId;
