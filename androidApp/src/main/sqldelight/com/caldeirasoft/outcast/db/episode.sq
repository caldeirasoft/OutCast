import java.lang.Boolean;
import java.lang.Integer;
import kotlin.collections.List;
import kotlinx.datetime.Instant;

CREATE TABLE episode (
    feedUrl TEXT NOT NULL,
    guid TEXT NOT NULL,
    name TEXT NOT NULL,
    url TEXT NOT NULL,
    podcastName TEXT NOT NULL,
    artistName TEXT NOT NULL,
    podcastId INTEGER,
    artistId INTEGER,
    releaseDateTime TEXT as Instant NOT NULL,
    description TEXT,
    artworkUrl TEXT NOT NULL,
    mediaUrl TEXT NOT NULL,
    mediaType TEXT NOT NULL,
    duration INTEGER AS Int NOT NULL,
    podcastEpisodeSeason INTEGER AS Int,
    podcastEpisodeNumber INTEGER AS Int,
    podcastEpisodeWebsiteUrl TEXT,
    podcastEpisodeType TEXT,
    playbackPosition INTEGER AS Int,
    isExplicit INTEGER AS Boolean NOT NULL DEFAULT 0,
    isPlayed INTEGER as Boolean NOT NULL DEFAULT 0,
    isFavorite INTEGER as Boolean NOT NULL DEFAULT 0,
    playedAt TEXT AS Instant,
    updatedAt TEXT AS Instant NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ', 'now')),
    PRIMARY KEY (feedUrl, guid),
    FOREIGN KEY (`feedUrl`) REFERENCES `podcast` (`feedUrl`)
);

getByGuid:
SELECT e.*
FROM episode e
WHERE feedUrl = ? AND guid = ?;

getAllByUrl:
SELECT *
FROM episode
WHERE feedUrl = ?
;

getAllPagedByUrl:
SELECT *
FROM episode
WHERE feedUrl = ?
LIMIT :limit OFFSET :offset;

countAllByUrl:
SELECT COUNT(*)
FROM episode
WHERE feedUrl = ?
;

getFavorites:
SELECT e.*
FROM episode AS e
WHERE isFavorite = 1;

getHistory:
SELECT e.*
FROM episode AS e
WHERE playbackPosition != NULL OR isPlayed = 1;

insert:
INSERT INTO episode
(feedUrl, guid, name, url, podcastId, podcastName, artistName, artistId,
 releaseDateTime, description, artworkUrl, isExplicit, mediaUrl, mediaType, duration,
  podcastEpisodeSeason, podcastEpisodeNumber, podcastEpisodeWebsiteUrl, podcastEpisodeType)
VALUES
?
ON CONFLICT(feedUrl, guid)
DO UPDATE SET
    name = excluded.name,
    url = excluded.url,
    podcastName = excluded.podcastName,
    artistName = excluded.artistName,
    releaseDateTime = excluded.releaseDateTime,
    description = excluded.description,
    isExplicit = excluded.isExplicit,
    artworkUrl = excluded.artworkUrl,
    mediaUrl = excluded.mediaUrl,
    mediaType = excluded.mediaType,
    duration = excluded.duration,
    podcastEpisodeSeason = excluded.podcastEpisodeSeason,
    podcastEpisodeNumber = excluded.podcastEpisodeNumber,
    podcastEpisodeWebsiteUrl = excluded.podcastEpisodeWebsiteUrl,
    updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE feedUrl = excluded.feedUrl AND guid = excluded.guid;


addToFavorites:
UPDATE episode
SET isFavorite = 1, updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE feedUrl = ? AND guid = ?
;

removeFromFavorites:
UPDATE episode
SET isFavorite = 0, updatedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE feedUrl = ? AND guid = ?
;

addToHistory:
UPDATE episode
SET playbackPosition = ?, playedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE feedUrl = ? AND guid = ?
;

markEpisodeAsPlayed:
UPDATE episode
SET playbackPosition = NULL, isPlayed = 1, playedAt = strftime('%Y-%m-%dT%H:%M:%fZ', 'now')
WHERE feedUrl = ? AND guid = ?
;

deleteById:
DELETE FROM episode
WHERE feedUrl = ? AND guid = ?;

deleteAll:
DELETE FROM episode;
